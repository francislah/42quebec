#include "Dog.hpp"

//**************************************************************************//
//                              Constructors                                //
//**************************************************************************//

Dog::Dog(void) {
	this->_type = "Dog";
	this->_brain = new Brain();
	std::cout << "Dog default construction" << std::endl;}

Dog::Dog(const Dog &copy) {
	this->_type = copy._type;
	this->_brain = new Brain();
	this->_brain = copy._brain;
	std::cout << "Dog copy construction" << std::endl;
	*this = copy;}

//**************************************************************************//
//                                 Setters                                  //
//**************************************************************************//

//**************************************************************************//
//                                 Getters                                  //
//**************************************************************************//

//**************************************************************************//
//                             Member functions                             //
//**************************************************************************//

void	Dog::makeSound(void) {std::cout << "Woof" << std::endl;}

//**************************************************************************//
//                           Operators overload                             //
//**************************************************************************//

Dog	&Dog::operator=(const Dog &copy){
	if (this != &copy){
		delete this->_brain;
		this->_type = copy._type;
		*this->_brain = *(copy._brain);}
	return (*this);}

//**************************************************************************//
//                               Destructors                                //
//**************************************************************************//

Dog::~Dog(void){
	delete this->_brain;
	std::cout << "Dog destruction" << std::endl;}