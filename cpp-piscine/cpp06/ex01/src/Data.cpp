#include "Data.hpp"

//**************************************************************************//
//                              Constructors                                //
//**************************************************************************//

Data::Data(void) : x(0), y(0) {
	std::cout << "Data default construction" << std::endl;}

Data::Data(const Data &copy) {
	this->x = copy.x;
	this->y = copy.y;
	std::cout << "Data copy construction" << std::endl;
	*this = copy;}

//**************************************************************************//
//                                 Setters                                  //
//**************************************************************************//

//**************************************************************************//
//                                 Getters                                  //
//**************************************************************************//

//**************************************************************************//
//                             Member functions                             //
//**************************************************************************//

uintptr_t	Data::serialize(Data* ptr) {return (reinterpret_cast<uintptr_t>(ptr));}

Data*	Data::deserialize(uintptr_t raw) {return (reinterpret_cast<Data*>(raw));}

//**************************************************************************//
//                           Operators overload                             //
//**************************************************************************//

Data	&Data::operator=(const Data &copy){
	if (this != &copy){
		this->x = copy.x;
		this->y = copy.y;}
	return (*this);}

//**************************************************************************//
//                               Destructors                                //
//**************************************************************************//

Data::~Data(void){std::cout << "Data destruction" << std::endl;}

//**************************************************************************//
//                              Friend function                             //
//**************************************************************************//

std::ostream& operator<<(std::ostream& out, const Data& data) {
	(void) data;
	return (out);}
